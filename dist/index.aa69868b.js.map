{"mappings":"AAAA,0CAA0C;AAE1C;AAEA,mBAAmB;AAEnB,IAAI,cAAc,SAAS,cAAc,CAAC;AAC1C,IAAI,gBAAgB,SAAS,cAAc,CAAC;AAE5C,YAAY,gBAAgB,CAAC,SAAS;AACtC,cAAc,gBAAgB,CAAC,SAAS;AAExC,SAAS;IACL,IAAI,WAAW,SAAS,cAAc,CAAC;IAEvC,IAAI,QAAQ,OAAO,gBAAgB,CAAC;IAEpC,IAAI,MAAM,OAAO,KAAK,QAClB,SAAS,KAAK,CAAC,OAAO,GAAG;SAEzB,SAAS,KAAK,CAAC,OAAO,GAAG;AAEjC;AAEA,qBAAqB;AAErB,MAAM,iBAAiB,SAAS,cAAc,CAAC;AAE/C,MAAM,iBAAiB,SAAS,cAAc,CAAC;AAE/C,MAAM,MAAK;AAEX,OAAO,MAAM,GAAG;AAEhB,OAAO,MAAM,GAAG;AAEhB,OAAO,MAAM,GAAG;AAEhB,OAAO,MAAM,GAAE;AAEf,0CAA0C;AAC1C,eAAe;IACX,IAAI;QACA,IAAI,WAAW,MAAM,MAAM;QAE3B,IAAI,UAAU,MAAM,SAAS,IAAI;QAEjC,qCAAqC;QACrC,IAAI,UAAU,QAAQ,IAAI,CAAC,CAAC,GAAE,IAAM,EAAE,eAAe,GAAG,EAAE,eAAe;QAEzE,oCAAoC;QACpC,IAAI,cAAc,QAAQ,MAAM,CAAC,CAAA,OAAQ,KAAK,IAAI,IAAI;QAEtD,2CAA2C;QAC3C,IAAI,YAAY,EAAE;QAElB,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,IAClB,UAAU,IAAI,CAAC,WAAW,CAAC,EAAE;QAIjC,kBAAkB;IAEtB,EAAE,OAAM;QACJ,QAAQ,GAAG,CAAC;IAChB;AACJ;AAEA,kBAAkB;AAClB,SAAS,kBAAkB,SAAS;IAChC,IAAI,MAAM,gBAAgB;QACtB,MAAM;QACN,MAAM;YACF,QAAQ,UAAU,GAAG,CAAC,CAAA,MAAO,IAAI,IAAI;YACrC,UAAU;gBAAC;oBACP,OAAO;oBACP,MAAM,UAAU,GAAG,CAAC,CAAA,MAAO,IAAI,eAAe;oBAC9C,aAAa;gBACjB;aAAE;QACN;IACJ;AACA;AAGJ,4CAA4C;AAC5C,eAAe;IACX,IAAI;QACA,IAAI,WAAW,MAAM,MAAM;QAE3B,IAAI,WAAW,MAAM,SAAS,IAAI;QAElC,qCAAqC;QACrC,IAAI,UAAU,SAAS,IAAI,CAAC,CAAC,GAAE,IAAM,EAAE,eAAe,GAAG,EAAE,eAAe;QAE1E,qCAAqC;QACrC,IAAI,eAAe,QAAQ,MAAM,CAAC,CAAA,OAAQ,KAAK,IAAI,IAAI;QAEtD,2CAA2C;QAC3C,IAAI,aAAa,EAAE;QAEnB,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,IAClB,WAAW,IAAI,CAAC,YAAY,CAAC,EAAE;QAIpC,mBAAmB;IAEvB,EAAE,OAAM;QACJ,QAAQ,GAAG,CAAC;IAChB;AACJ;AAEA,kBAAkB;AAClB,SAAS,mBAAmB,UAAU;IAClC,IAAI,MAAM,gBAAgB;QACtB,MAAM;QACN,MAAM;YACF,QAAQ,WAAW,GAAG,CAAC,CAAA,MAAO,IAAI,IAAI;YACtC,UAAU;gBAAC;oBACP,OAAO;oBACP,MAAM,WAAW,GAAG,CAAC,CAAA,MAAO,IAAI,eAAe;oBAC/C,aAAa;gBACjB;aAAE;QACN;IACJ;AACA","sources":["src/js/main.js"],"sourcesContent":["//För att göra en responsiv hamburgermeny \r\n\r\n\"use strict\"; \r\n\r\n//läser in element \r\n\r\nlet hamNavBtnEl = document.getElementById(\"openHamNav\"); \r\nlet hamNavCloseEl = document.getElementById(\"closeHamNav\")\r\n\r\nhamNavBtnEl.addEventListener('click', toggleMenu); \r\nhamNavCloseEl.addEventListener('click', toggleMenu); \r\n\r\nfunction toggleMenu() {\r\n    let hamNavEl = document.getElementById(\"hamburgerNav\");\r\n\r\n    let style = window.getComputedStyle(hamNavEl); \r\n\r\n    if (style.display === \"none\"){\r\n        hamNavEl.style.display = \"block\"\r\n    } else {\r\n        hamNavEl.style.display = \"none\"\r\n    }\r\n} \r\n\r\n//För diagrammen TEST\r\n\r\nconst coursesChartEL = document.getElementById(\"coursesChart\"); \r\n\r\nconst programChartEl = document.getElementById(\"programChart\"); \r\n\r\nconst url= \"https://studenter.miun.se/~mallar/dt211g/\"; \r\n\r\nwindow.onload = getCourses();\r\n\r\nwindow.onload = getPrograms(); \r\n\r\nwindow.onload = createCoursechart(); \r\n\r\nwindow.onload= createProgramchart(); \r\n\r\n//För att få fram de populäraste kurserna \r\nasync function getCourses(){\r\n    try {\r\n        let response = await fetch(url); \r\n\r\n        let courses = await response.json(); \r\n\r\n        //sorterar så mest sökta kommer först\r\n        let mostPop = courses.sort((a,b) => b.applicantsTotal - a.applicantsTotal);\r\n        \r\n        //filtrerar ut så det bara är kurser\r\n        let onlyCourses = mostPop.filter(data => data.type == \"Kurs\");  \r\n \r\n        // Loopar för att få ut de 6 mest populära \r\n        let courseArr = []; \r\n\r\n        for(let i = 0; i < 6; i++) {\r\n            courseArr.push(onlyCourses[i]);\r\n             \r\n        } \r\n\r\n        createCoursechart(courseArr); \r\n        \r\n    } catch {\r\n        console.log(\"Något gick fel...\"); \r\n    }\r\n} \r\n\r\n//Skapa diagramen \r\nfunction createCoursechart(courseArr) {\r\n    new Chart(coursesChartEL, {\r\n        type: 'bar', \r\n        data: {\r\n            labels: courseArr.map(row => row.name), \r\n            datasets: [{\r\n                label: '# of applicants',\r\n                data: courseArr.map(row => row.applicantsTotal), \r\n                borderWidth: 1\r\n            }]\r\n        },\r\n    }); \r\n    }\r\n\r\n\r\n//För att få fram de populäsraste programmen\r\nasync function getPrograms(){\r\n    try {\r\n        let response = await fetch(url); \r\n\r\n        let programs = await response.json(); \r\n\r\n        //sorterar så mest sökta kommer först\r\n        let mostPop = programs.sort((a,b) => b.applicantsTotal - a.applicantsTotal);\r\n        \r\n        //filtrerar ut så det bara är program\r\n        let onlyPrograms = mostPop.filter(data => data.type == \"Program\");  \r\n\r\n         // Loopar för att få ut de 6 mest populära \r\n         let programArr = []; \r\n\r\n         for(let i = 0; i < 5; i++) {\r\n             programArr.push(onlyPrograms[i]);\r\n              \r\n         } \r\n \r\n        createProgramchart(programArr); \r\n\r\n    } catch {\r\n        console.log(\"Något gick fel...\"); \r\n    }\r\n}\r\n\r\n//Skapa diagramen \r\nfunction createProgramchart(programArr) {\r\n    new Chart(programChartEl, {\r\n        type: 'pie', \r\n        data: {\r\n            labels: programArr.map(row => row.name), \r\n            datasets: [{\r\n                label: '# of applicants',\r\n                data: programArr.map(row => row.applicantsTotal), \r\n                borderWidth: 1\r\n            }]\r\n        },\r\n    }); \r\n    }"],"names":[],"version":3,"file":"index.aa69868b.js.map","sourceRoot":"/__parcel_source_root/"}